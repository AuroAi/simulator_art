// Generated by gencpp from file art_msgs/BrakeState.msg
// DO NOT EDIT!


#ifndef ART_MSGS_MESSAGE_BRAKESTATE_H
#define ART_MSGS_MESSAGE_BRAKESTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace art_msgs
{
template <class ContainerAllocator>
struct BrakeState_ {
  typedef BrakeState_<ContainerAllocator> Type;

  BrakeState_()
    : header()
  , position(0.0)
  , potentiometer(0.0)
  , encoder(0.0)
  , pressure(0.0) {
  }
  BrakeState_(const ContainerAllocator& _alloc)
    : header(_alloc)
  , position(0.0)
  , potentiometer(0.0)
  , encoder(0.0)
  , pressure(0.0) {
  }



  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

  typedef float _position_type;
  _position_type position;

  typedef float _potentiometer_type;
  _potentiometer_type potentiometer;

  typedef float _encoder_type;
  _encoder_type encoder;

  typedef float _pressure_type;
  _pressure_type pressure;




  typedef boost::shared_ptr< ::art_msgs::BrakeState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::art_msgs::BrakeState_<ContainerAllocator> const> ConstPtr;

}; // struct BrakeState_

typedef ::art_msgs::BrakeState_<std::allocator<void> > BrakeState;

typedef boost::shared_ptr< ::art_msgs::BrakeState > BrakeStatePtr;
typedef boost::shared_ptr< ::art_msgs::BrakeState const> BrakeStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::art_msgs::BrakeState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::art_msgs::BrakeState_<ContainerAllocator> >::stream(s, "", v);
  return s;
}

} // namespace art_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/indigo/share/nav_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'art_msgs': ['/fast_data/ros/auro_repo/sandbox/src/map/art_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::art_msgs::BrakeState_<ContainerAllocator> >
  : FalseType
{ };

template <class ContainerAllocator>
struct IsFixedSize< ::art_msgs::BrakeState_<ContainerAllocator> const>
  : FalseType
{ };

template <class ContainerAllocator>
struct IsMessage< ::art_msgs::BrakeState_<ContainerAllocator> >
  : TrueType
{ };

template <class ContainerAllocator>
struct IsMessage< ::art_msgs::BrakeState_<ContainerAllocator> const>
  : TrueType
{ };

template <class ContainerAllocator>
struct HasHeader< ::art_msgs::BrakeState_<ContainerAllocator> >
  : TrueType
{ };

template <class ContainerAllocator>
struct HasHeader< ::art_msgs::BrakeState_<ContainerAllocator> const>
  : TrueType
{ };


template<class ContainerAllocator>
struct MD5Sum< ::art_msgs::BrakeState_<ContainerAllocator> > {
  static const char* value() {
    return "a2cf66ca94ba3a72fab2bbf4fd458de0";
  }

  static const char* value(const ::art_msgs::BrakeState_<ContainerAllocator>&) {
    return value();
  }
  static const uint64_t static_value1 = 0xa2cf66ca94ba3a72ULL;
  static const uint64_t static_value2 = 0xfab2bbf4fd458de0ULL;
};

template<class ContainerAllocator>
struct DataType< ::art_msgs::BrakeState_<ContainerAllocator> > {
  static const char* value() {
    return "art_msgs/BrakeState";
  }

  static const char* value(const ::art_msgs::BrakeState_<ContainerAllocator>&) {
    return value();
  }
};

template<class ContainerAllocator>
struct Definition< ::art_msgs::BrakeState_<ContainerAllocator> > {
  static const char* value() {
    return "# ART brake controller state message\n\
\n\
# $Id$\n\
\n\
Header  header\n\
\n\
float32 position                # fractional position\n\
float32 potentiometer           # potentiometer voltage\n\
float32 encoder                 # encoder reading\n\
float32 pressure                # pressure sensor\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
         }

           static const char* value(const ::art_msgs::BrakeState_<ContainerAllocator>&) {
           return value();
         }
         };

         } // namespace message_traits
         } // namespace ros

           namespace ros
           {
           namespace serialization
           {

           template<class ContainerAllocator> struct Serializer< ::art_msgs::BrakeState_<ContainerAllocator> > {
           template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m) {
           stream.next(m.header);
           stream.next(m.position);
           stream.next(m.potentiometer);
           stream.next(m.encoder);
           stream.next(m.pressure);
         }

           ROS_DECLARE_ALLINONE_SERIALIZER;
         }; // struct BrakeState_

         } // namespace serialization
         } // namespace ros

           namespace ros
           {
           namespace message_operations
           {

           template<class ContainerAllocator>
           struct Printer< ::art_msgs::BrakeState_<ContainerAllocator> > {
           template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::art_msgs::BrakeState_<ContainerAllocator>& v) {
       s << indent << "header: ";
           s << std::endl;
           Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
       s << indent << "position: ";
           Printer<float>::stream(s, indent + "  ", v.position);
       s << indent << "potentiometer: ";
           Printer<float>::stream(s, indent + "  ", v.potentiometer);
       s << indent << "encoder: ";
           Printer<float>::stream(s, indent + "  ", v.encoder);
       s << indent << "pressure: ";
           Printer<float>::stream(s, indent + "  ", v.pressure);
         }
         };

         } // namespace message_operations
         } // namespace ros

#endif // ART_MSGS_MESSAGE_BRAKESTATE_H
