// Generated by gencpp from file art_msgs/ArtVehicle.msg
// DO NOT EDIT!


#ifndef ART_MSGS_MESSAGE_ARTVEHICLE_H
#define ART_MSGS_MESSAGE_ARTVEHICLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace art_msgs
{
template <class ContainerAllocator>
struct ArtVehicle_
{
  typedef ArtVehicle_<ContainerAllocator> Type;

  ArtVehicle_()
  {
  }
  ArtVehicle_(const ContainerAllocator& _alloc)
  {
  }




  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  frame_id;
  static const float length;
  static const float width;
  static const float height;
  static const float halflength;
  static const float halfwidth;
  static const float halfheight;
  static const float wheelbase;
  static const float lane_width;
  static const float turning_radius;
  static const float weight_curb;
  static const float weight_max_payload;
  static const float weight_gross;
  static const float weight;
  static const float max_accel;
  static const float max_decl;
  static const float max_speed;
  static const float front_bumper_px;
  static const float rear_bumper_px;
  static const float front_left_wheel_px;
  static const float front_left_wheel_py;
  static const float front_right_wheel_px;
  static const float front_right_wheel_py;
  static const float rear_left_wheel_px;
  static const float rear_left_wheel_py;
  static const float rear_right_wheel_px;
  static const float rear_right_wheel_py;
  static const float geom_px;
  static const float geom_py;
  static const float geom_pa;
  static const float velodyne_px;
  static const float velodyne_py;
  static const float velodyne_pz;
  static const float velodyne_yaw;
  static const float velodyne_pitch;
  static const float velodyne_roll;
  static const float front_SICK_px;
  static const float front_SICK_py;
  static const float front_SICK_pz;
  static const float front_SICK_roll;
  static const float front_SICK_pitch;
  static const float front_SICK_yaw;
  static const float rear_SICK_px;
  static const float rear_SICK_py;
  static const float rear_SICK_pz;
  static const float rear_SICK_roll;
  static const float rear_SICK_pitch;
  static const float rear_SICK_yaw;
  static const float center_front_camera_px;
  static const float center_front_camera_py;
  static const float center_front_camera_pz;
  static const float center_front_camera_yaw;
  static const float center_front_camera_pitch;
  static const float center_front_camera_roll;
  static const float right_front_camera_px;
  static const float right_front_camera_py;
  static const float right_front_camera_pz;
  static const float right_front_camera_yaw;
  static const float right_front_camera_pitch;
  static const float right_front_camera_roll;
  static const float left_front_camera_px;
  static const float left_front_camera_py;
  static const float left_front_camera_pz;
  static const float left_front_camera_yaw;
  static const float left_front_camera_pitch;
  static const float left_front_camera_roll;
  static const float max_steer_degrees;
  static const float max_steer_radians;
  static const float turn_radius;
  static const float front_outer_wheel_turn_radius;
  static const float front_inner_wheel_turn_radius;
  static const float rear_outer_wheel_turn_radius;
  static const float rear_inner_wheel_turn_radius;


  typedef boost::shared_ptr< ::art_msgs::ArtVehicle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::art_msgs::ArtVehicle_<ContainerAllocator> const> ConstPtr;

}; // struct ArtVehicle_

typedef ::art_msgs::ArtVehicle_<std::allocator<void> > ArtVehicle;

typedef boost::shared_ptr< ::art_msgs::ArtVehicle > ArtVehiclePtr;
typedef boost::shared_ptr< ::art_msgs::ArtVehicle const> ArtVehicleConstPtr;

// constants requiring out of line definition


template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >
ArtVehicle_<ContainerAllocator>::frame_id =

  "\"vehicle\""

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::length =

  3.25

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::width =

  1.397

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::height =

  1.778

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::halflength =

  1.625

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::halfwidth =

  0.6985

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::halfheight =

  0.889

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::wheelbase =

  2.59

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::lane_width =

  4.0

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::turning_radius =

  4.6

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::weight_curb =

  376.0

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::weight_max_payload =

  421.8

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::weight_gross =

  998.0

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::weight =

  700.0

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::max_accel =

  1.2

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::max_decl =

  3.2

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::max_speed =

  6.7056

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::front_bumper_px =

  3.5

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::rear_bumper_px =

  -1.3

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::front_left_wheel_px =

  2.33918

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::front_left_wheel_py =

  2.4

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::front_right_wheel_px =

  2.33918

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::front_right_wheel_py =

  -1.06

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::rear_left_wheel_px =

  0.0

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::rear_left_wheel_py =

  1.06

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::rear_right_wheel_px =

  0.0

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::rear_right_wheel_py =

  -1.06

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::geom_px =

  1.1

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::geom_py =

  0.0

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::geom_pa =

  0.0

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::velodyne_px =

  0.393

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::velodyne_py =

  0.278

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::velodyne_pz =

  2.4

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::velodyne_yaw =

  -0.02155

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::velodyne_pitch =

  0.0163537350912

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::velodyne_roll =

  0.0062133721371

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::front_SICK_px =

  3.178

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::front_SICK_py =

  0.0

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::front_SICK_pz =

  0.7

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::front_SICK_roll =

  0.0

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::front_SICK_pitch =

  0.0

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::front_SICK_yaw =

  0.027

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::rear_SICK_px =

  -1.14

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::rear_SICK_py =

  0.0

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::rear_SICK_pz =

  0.7

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::rear_SICK_roll =

  0.0

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::rear_SICK_pitch =

  0.0

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::rear_SICK_yaw =

  3.14159265359

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::center_front_camera_px =

  0.548

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::center_front_camera_py =

  0.278

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::center_front_camera_pz =

  2.184

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::center_front_camera_yaw =

  -0.052

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::center_front_camera_pitch =

  0.025

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::center_front_camera_roll =

  0.0

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::right_front_camera_px =

  0.471

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::right_front_camera_py =

  0.144

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::right_front_camera_pz =

  2.184

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::right_front_camera_yaw =

  -1.035

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::right_front_camera_pitch =

  0.022

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::right_front_camera_roll =

  0.0

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::left_front_camera_px =

  0.471

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::left_front_camera_py =

  0.412

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::left_front_camera_pz =

  2.184

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::left_front_camera_yaw =

  0.97

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::left_front_camera_pitch =

  -0.017

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::left_front_camera_roll =

  0.0

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::max_steer_degrees =

  29.0

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::max_steer_radians =

  0.5061455

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::turn_radius =

  4.21999225977

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::front_outer_wheel_turn_radius =

  5.7749529293

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::front_inner_wheel_turn_radius =

  3.93157909169

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::rear_outer_wheel_turn_radius =

  5.27999225977

  ;



template<typename ContainerAllocator> const float
ArtVehicle_<ContainerAllocator>::rear_inner_wheel_turn_radius =

  3.15999225977

  ;




template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::art_msgs::ArtVehicle_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::art_msgs::ArtVehicle_<ContainerAllocator> >::stream(s, "", v);
  return s;
}

} // namespace art_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/indigo/share/nav_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'art_msgs': ['/fast_data/ros/auro_repo/sandbox/src/map/art_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::art_msgs::ArtVehicle_<ContainerAllocator> >
    : TrueType
{ };

template <class ContainerAllocator>
struct IsFixedSize< ::art_msgs::ArtVehicle_<ContainerAllocator> const>
    : TrueType
{ };

template <class ContainerAllocator>
struct IsMessage< ::art_msgs::ArtVehicle_<ContainerAllocator> >
    : TrueType
{ };

template <class ContainerAllocator>
struct IsMessage< ::art_msgs::ArtVehicle_<ContainerAllocator> const>
    : TrueType
{ };

template <class ContainerAllocator>
struct HasHeader< ::art_msgs::ArtVehicle_<ContainerAllocator> >
    : FalseType
{ };

template <class ContainerAllocator>
struct HasHeader< ::art_msgs::ArtVehicle_<ContainerAllocator> const>
    : FalseType
{ };


template<class ContainerAllocator>
struct MD5Sum< ::art_msgs::ArtVehicle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5d4205a78afea958dd39245561302a13";
  }

  static const char* value(const ::art_msgs::ArtVehicle_<ContainerAllocator>&)
  {
    return value();
  }
  static const uint64_t static_value1 = 0x5d4205a78afea958ULL;
  static const uint64_t static_value2 = 0xdd39245561302a13ULL;
};

template<class ContainerAllocator>
struct DataType< ::art_msgs::ArtVehicle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "art_msgs/ArtVehicle";
  }

  static const char* value(const ::art_msgs::ArtVehicle_<ContainerAllocator>&)
  {
    return value();
  }
};

template<class ContainerAllocator>
struct Definition< ::art_msgs::ArtVehicle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#  ART vehicle dimensions.\n\
#  $Id$\n\
\n\
#  This class encapsulates constants for the dimensions of the ART\n\
#  autonomous vehicle.  All units are meters or radians, except where\n\
#  noted.  This is not a published message, it defines multi-language\n\
#  constants.\n\
\n\
# ROS frame ID\n\
string frame_id = \"vehicle\"\n\
\n\
float32 length = 3.25                    # overall length\n\
float32 width = 1.397                    # overall width\n\
float32 height = 1.778                    # overall height (TBD)\n\
float32 halflength = 1.625                # length / 2\n\
float32 halfwidth = 0.6985                # width / 2\n\
float32 halfheight = 0.889               # height / 2\n\
float32 wheelbase = 2.59     	# wheelbase\n\
float32 lane_width = 4                    # overall width\n\
float32 turning_radius = 4.6 # wheelbase/turning_radius = 0.563043478 : sin-1(ans) = 34.266536945 degree = 0.6 radians\n\
float32 weight_curb = 376 # kg curb\n\
float32 weight_max_payload = 421.8  # kg max payload\n\
float32 weight_gross = 998 # kg Gross Vehicle Weight Rating (GVWR) \n\
float32 weight  = 700 # kg aprox\n\
float32 max_accel = 1.2 # horse_power = 5 #accel ~ horse_power*746/mass # not using this result\n\
float32 max_decl = 3.2 # horse_power = 5 #accel ~ horse_power*746/mass # not using this result\n\
float32 max_speed = 6.7056 # 15mph * 0.44704\n\
# egocentric coordinates relative to vehicle origin at center of\n\
# rear axle\n\
float32 front_bumper_px = 3.5   	# (approximately)\n\
float32 rear_bumper_px = -1.3           # front_bumper_px - length\n\
float32 front_left_wheel_px = 2.33918   # wheelbase\n\
float32 front_left_wheel_py = 2.4       # halfwidth\n\
float32 front_right_wheel_px = 2.33918  # wheelbase\n\
float32 front_right_wheel_py = -1.06    #-halfwidth\n\
float32 rear_left_wheel_px = 0.0\n\
float32 rear_left_wheel_py = 1.06       # halfwidth\n\
float32 rear_right_wheel_px = 0.0\n\
float32 rear_right_wheel_py = -1.06     #-halfwidth\n\
\n\
# Player geometry, egocentric pose of robot base (the px really\n\
# does need to be positive for some reason)\n\
float32 geom_px = 1.1                   # front_bumper_px - halflength\n\
float32 geom_py = 0.0\n\
float32 geom_pa = 0.0\n\
\n\
float32 velodyne_px = 0.393             # (approximately)\n\
float32 velodyne_py = 0.278             # (approximately)\n\
float32 velodyne_pz = 2.4               # (calibrated)\n\
#float32 velodyne_yaw=-0.0343           # (before remounting)\n\
float32 velodyne_yaw=-0.02155           # (approximately)\n\
float32 velodyne_pitch=0.016353735091186868 # (calculated)\n\
float32 velodyne_roll=0.0062133721370998124 # (calculated)\n\
\n\
float32 front_SICK_px = 3.178\n\
float32 front_SICK_py= 0.0		# (approximately)\n\
float32 front_SICK_pz = 0.7\n\
float32 front_SICK_roll = 0.0		# (approximately)\n\
float32 front_SICK_pitch = 0.0		# (approximately)\n\
float32 front_SICK_yaw = 0.027	        # (approximately)\n\
\n\
float32 rear_SICK_px = -1.140\n\
float32 rear_SICK_py = 0.0              # (approximately)\n\
float32 rear_SICK_pz = 0.7\n\
float32 rear_SICK_roll = 0.0		# (approximately)\n\
float32 rear_SICK_pitch = 0.0		# (approximately)\n\
float32 rear_SICK_yaw = 3.1415926535897931160  # (approximately PI)\n\
\n\
float32 center_front_camera_px = 0.548     # velodyne_px + 0.155 (approx)\n\
float32 center_front_camera_py = 0.278    # velodyne_py (approx)\n\
float32 center_front_camera_pz = 2.184    # velodyne_pz-0.216 (approx)\n\
float32 center_front_camera_yaw = -0.052  # (measured)\n\
float32 center_front_camera_pitch = 0.025   # (measured)\n\
float32 center_front_camera_roll = 0.0    # (assumed)\n\
\n\
float32 right_front_camera_px = 0.471    # velodyne_px + 0.078 (= 0.155 * cos 60 deg) (approx)\n\
float32 right_front_camera_py = 0.144   # velodyne_py - 0.1342 (= 0.155 + sin 60 deg) (approx)\n\
float32 right_front_camera_pz = 2.184   # velodyne_pz-0.216 (approx)\n\
#float32 right_front_camera_yaw = -0.4974 # (approx -28.5 deg)\n\
float32 right_front_camera_yaw = -1.035 # (measured)\n\
float32 right_front_camera_pitch = 0.022  # (measured)\n\
float32 right_front_camera_roll = 0.0   # (assumed)\n\
\n\
float32 left_front_camera_px = 0.471     # velodyne_px + 0.078 (= 0.155 * cos 60 deg) (approx)\n\
float32 left_front_camera_py = 0.412    # velodyne_py + 0.1342 (= 0.155 * sin 60 deg) (approx)\n\
float32 left_front_camera_pz = 2.184    # velodyne_pz-0.216 (approx)\n\
#float32 left_front_camera_yaw = 0.4974  # (approx +28.5 deg)\n\
float32 left_front_camera_yaw = 0.97  # (measured)\n\
float32 left_front_camera_pitch = -0.017   # (measured)\n\
float32 left_front_camera_roll = 0.0    # (assumed)\n\
\n\
# Compute vehicle turning radius.  This is the distance from the\n\
# center of curvature to the vehicle origin in the middle of the\n\
# rear axle.  The <art/steering.h> comments describe the steering\n\
# geometry model.  Since max_steer_degrees is considerably less\n\
# than 90 degrees, there is no problem taking its tangent.\n\
\n\
float32 max_steer_degrees = 29.0        # maximum steering angle (degrees)\n\
float32 max_steer_radians = 0.5061455   # maximum steering angle (radians)\n\
\n\
# Due to limitations of the ROS message definition format, these\n\
# values needed to be calculated by hand...\n\
\n\
# ArtVehicle.wheelbase / math.tan(ArtVehicle.max_steer_radians)\n\
float32 turn_radius = 4.2199922597674142\n\
\n\
# math.sqrt(math.pow(ArtVehicle.wheelbase,2)\n\
#           + math.pow(ArtVehicle.turn_radius + ArtVehicle.halfwidth,2))\n\
float32 front_outer_wheel_turn_radius = 5.774952929297676\n\
\n\
# math.sqrt(math.pow(ArtVehicle.wheelbase,2)\n\
#           + math.pow(ArtVehicle.turn_radius - ArtVehicle.halfwidth,2))\n\
float32 front_inner_wheel_turn_radius = 3.9315790916869484\n\
\n\
# ArtVehicle.turn_radius + ArtVehicle.halfwidth\n\
float32 rear_outer_wheel_turn_radius = 5.2799922597674147\n\
\n\
# ArtVehicle.turn_radius - ArtVehicle.halfwidth\n\
float32 rear_inner_wheel_turn_radius = 3.1599922597674142\n\
\n\
# float32 front_outer_bumper_turn_radius = sqrtf(powf(front_bumper_px,2)+powf(turn_radius+halfwidth,2))\n\
#  \n\
# float32 front_inner_bumper_turn_radius = sqrtf(powf(front_bumper_px,2)+ powf(turn_radius-halfwidth,2))\n\
#\n\
# float32 rear_outer_bumper_turn_radius = sqrtf(powf(rear_bumper_px,2)+ powf(turn_radius+halfwidth,2))\n\
#\n\
# float32 rear_inner_bumper_turn_radius = sqrtf(powf(rear_bumper_px,2)+ powf(turn_radius-halfwidth,2))\n\
";
  }

  static const char* value(const ::art_msgs::ArtVehicle_<ContainerAllocator>&)
  {
    return value();
  }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::art_msgs::ArtVehicle_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream&, T)
  {}

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ArtVehicle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::art_msgs::ArtVehicle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::art_msgs::ArtVehicle_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // ART_MSGS_MESSAGE_ARTVEHICLE_H
