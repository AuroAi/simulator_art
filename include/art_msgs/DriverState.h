// Generated by gencpp from file art_msgs/DriverState.msg
// DO NOT EDIT!


#ifndef ART_MSGS_MESSAGE_DRIVERSTATE_H
#define ART_MSGS_MESSAGE_DRIVERSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace art_msgs
{
template <class ContainerAllocator>
struct DriverState_
{
  typedef DriverState_<ContainerAllocator> Type;

  DriverState_()
    : state(0)
  {
  }
  DriverState_(const ContainerAllocator& _alloc)
    : state(0)
  {
  }



  typedef uint32_t _state_type;
  _state_type state;


  enum { CLOSED = 0u };
  enum { OPENED = 1u };
  enum { RUNNING = 2u };


  typedef boost::shared_ptr< ::art_msgs::DriverState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::art_msgs::DriverState_<ContainerAllocator> const> ConstPtr;

}; // struct DriverState_

typedef ::art_msgs::DriverState_<std::allocator<void> > DriverState;

typedef boost::shared_ptr< ::art_msgs::DriverState > DriverStatePtr;
typedef boost::shared_ptr< ::art_msgs::DriverState const> DriverStateConstPtr;

// constants requiring out of line definition









template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::art_msgs::DriverState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::art_msgs::DriverState_<ContainerAllocator> >::stream(s, "", v);
  return s;
}

} // namespace art_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/indigo/share/nav_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'art_msgs': ['/fast_data/ros/auro_repo/sandbox/src/map/art_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::art_msgs::DriverState_<ContainerAllocator> >
    : TrueType
{ };

template <class ContainerAllocator>
struct IsFixedSize< ::art_msgs::DriverState_<ContainerAllocator> const>
    : TrueType
{ };

template <class ContainerAllocator>
struct IsMessage< ::art_msgs::DriverState_<ContainerAllocator> >
    : TrueType
{ };

template <class ContainerAllocator>
struct IsMessage< ::art_msgs::DriverState_<ContainerAllocator> const>
    : TrueType
{ };

template <class ContainerAllocator>
struct HasHeader< ::art_msgs::DriverState_<ContainerAllocator> >
    : FalseType
{ };

template <class ContainerAllocator>
struct HasHeader< ::art_msgs::DriverState_<ContainerAllocator> const>
    : FalseType
{ };


template<class ContainerAllocator>
struct MD5Sum< ::art_msgs::DriverState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "92d8e6361001072f038b293728a430f0";
  }

  static const char* value(const ::art_msgs::DriverState_<ContainerAllocator>&)
  {
    return value();
  }
  static const uint64_t static_value1 = 0x92d8e6361001072fULL;
  static const uint64_t static_value2 = 0x038b293728a430f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::art_msgs::DriverState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "art_msgs/DriverState";
  }

  static const char* value(const ::art_msgs::DriverState_<ContainerAllocator>&)
  {
    return value();
  }
};

template<class ContainerAllocator>
struct Definition< ::art_msgs::DriverState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ART driver states -- similar to those in driver_base.\n\
\n\
# $Id$\n\
\n\
# constants\n\
uint32 CLOSED = 0       # Not connected to the hardware\n\
uint32 OPENED = 1       # Passively connected to the hardware\n\
uint32 RUNNING = 2      # Sending hardware commands\n\
\n\
uint32 state\n\
";
  }

  static const char* value(const ::art_msgs::DriverState_<ContainerAllocator>&)
  {
    return value();
  }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::art_msgs::DriverState_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.state);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DriverState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::art_msgs::DriverState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::art_msgs::DriverState_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ART_MSGS_MESSAGE_DRIVERSTATE_H
